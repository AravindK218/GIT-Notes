#1 git init -->>  Create empty Git repo in specified directory. Run with no arguments to initialize the current directory as a git repository.

Example: git init repo1

#2 git clone -->>Clone repo located at <repo> onto local machine. Original repo can be located on the local filesystem or on a remote machine via HTTP or SSH

Example: git clone reponame

#3 git config  user.name <name> -->> Define author name to be used for all commits in current repo. Devs commonly use --global flag to set config options for current user.

Example: git config --global user.name username

#4 git diff -->>  Show unstaged changes between your index and working directory.

Example: git diff HEAD is between repo and working tree.
         git diff
         git diff --staged repository and staging index
         
#5 git log -->> Display the entire commit history using the default format. For customization see additional options.

#6 git status

#7 git revert  <commit> -->> Create new commit that undoes all of the changes made in <commit>, then apply it to the current branch.


#8 git reset <file>  -->>  Remove <file> from the staging area, but leave the working directory unchanged. This unstages a file without overwriting any changes.

#9 git clean -n  -->> Shows which files would be removed from working directory. Use the -f flag in place of the -n flag to execute the clean.
(Remove untracked files from the working tree) ( -n <==> --dry-run )


#10 git commit --amend  -->> Replace the last commit with the staged changes and last commit combined. Use with nothing staged to edit the last commit’s message.

#11 git rebase <base> -->> Rebase the current branch onto <base>. <base> can be commit ID, a branch name, a tag, or a relative reference to HEAD.

#12 git reflog -->> Show a log of changes to the local repository’s HEAD. Add --relative-date flag to show date info or --all to show all refs.

#13 git branch -->> List all of the branches in your repo. Add a <branch> argument to create a new branch with the name <branch>.

#14 git checkout -b <branch> -->> Create and check out a new branch named <branch>. Drop the -b flag to checkout an existing branch.

#15 git merge <branch> -->> Merge <branch> into the current branch.

#16 git remote add <name> <url> -->> Create a new connection to a remote repo. After adding a remote, you can use <name> as a shortcut for <url> in other commands

#17 git fetch <remote> <branch>  -->> Fetches a specific <branch>, from the repo. Leave off <branch> to fetch all remote refs.

#18 git pull <remote> -->> Fetch the specified remote’s copy of current branch and immediately merge it into the local copy.

#19 git push <remote> <branch>  -->> Push the branch to <remote>, along with necessary commits and objects. Creates named branch in the remote repo if it doesn’t exist.



